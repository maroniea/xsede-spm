!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module capsolpy ! in 
    interface  ! in :capsolpy
        module defcapsol ! in :capsolpy:CapSolPy.f90
            integer, parameter,optional :: dp=kind(1.d0)
            real(kind=8), parameter,optional :: pi=3.141592653589793238462643383279502884197_dp
            real(kind=8), parameter,optional :: e0=8.854187817620e-3_dp
            real(kind=8), parameter,optional, depend(pi,e0) :: pi_e0=0.027816251401339236
            real(kind=8), allocatable,dimension(:,:) :: u
            real(kind=8), allocatable,dimension(:,:) :: g
            integer :: napex
            integer :: ncone
            integer :: nlever
            integer :: nedge
            integer :: js
            real(kind=8) :: energy
            real(kind=8) :: gnrm
            real(kind=8) :: x
            real(kind=8) :: y
            real(kind=8) :: er
            real(kind=8) :: ez
            real(kind=8) :: force
            logical :: spheretest
            logical :: leveronlytest
            subroutine generategrid(n,m,l,h0,rho_max,z_max,rtip,theta,hcone,rcant,dcant,eps_r,hsam,verbose,hn,r,hm,zm) ! in :capsolpy:CapSolPy.f90:defcapsol
                integer intent(in) :: n
                integer intent(in) :: m
                integer intent(in) :: l
                real*8 intent(in) :: h0
                real*8 intent(in) :: rho_max
                real*8 intent(in) :: z_max
                real*8 intent(in) :: rtip
                real*8 intent(in) :: theta
                real*8 intent(in) :: hcone
                real*8 intent(in) :: rcant
                real*8 intent(in) :: dcant
                real*8 intent(in) :: eps_r
                real*8 intent(in) :: hsam
                integer intent(in) :: verbose
                real(kind=dp) dimension(n + 1),intent(out),depend(n) :: hn
                real(kind=dp) dimension(n + 1),intent(out),depend(n) :: r
                real(kind=dp) dimension(m+l+1),intent(out),depend(m,l) :: hm
                real(kind=dp) dimension(m+l+1),intent(out),depend(m,l) :: zm
            end subroutine generategrid
            subroutine setupprobe(n,m,l,h0,rtip,theta,hcone,rcant,dcant,eps_r,hsam,verbose,hn,r,hm,zm,probebot,probetop,b) ! in :capsolpy:CapSolPy.f90:defcapsol
                integer, optional,intent(in),check((len(hn)-1)>=n),depend(hn) :: n=(len(hn)-1)
                integer intent(in) :: m
                integer intent(in) :: l
                real*8 intent(in) :: h0
                real*8 intent(in) :: rtip
                real*8 intent(in) :: theta
                real*8 intent(in) :: hcone
                real*8 intent(in) :: rcant
                real*8 intent(in) :: dcant
                real*8 intent(in) :: eps_r
                real*8 intent(in) :: hsam
                integer intent(in) :: verbose
                real(kind=dp) dimension(n + 1),intent(in) :: hn
                real(kind=dp) dimension(n + 1),intent(in),depend(n) :: r
                real(kind=dp) dimension(m+l+1),intent(in),depend(m,l) :: hm
                real(kind=dp) dimension(m+l+1),intent(in),depend(m,l) :: zm
                integer dimension(n + 1),intent(out),depend(n) :: probebot
                integer dimension(n + 1),intent(out),depend(n) :: probetop
                real(kind=dp) dimension(m+l+1,n + 1),intent(out),depend(m,l,n) :: b
            end subroutine setupprobe
            subroutine integratedforce(n,m,l,z,rtip,theta,hcone,rcant,dcant,eps_r,hsam,hn,r,hm,zm,probebot) ! in :capsolpy:CapSolPy.f90:defcapsol
                integer, optional,intent(in),check((len(hn)-1)>=n),depend(hn) :: n=(len(hn)-1)
                integer intent(in) :: m
                integer intent(in) :: l
                real*8 intent(in) :: z
                real*8 intent(in) :: rtip
                real*8 intent(in) :: theta
                real*8 intent(in) :: hcone
                real*8 intent(in) :: rcant
                real*8 intent(in) :: dcant
                real*8 intent(in) :: eps_r
                real*8 intent(in) :: hsam
                real(kind=dp) dimension(n + 1),intent(in) :: hn
                real(kind=dp) dimension(n + 1),intent(in),depend(n) :: r
                real(kind=dp) dimension(m+l+1),intent(in),depend(m,l) :: hm
                real(kind=dp) dimension(m+l+1),intent(in),depend(m,l) :: zm
                integer dimension(n + 1),intent(in),depend(n) :: probebot
            end subroutine integratedforce
            subroutine get_time(time) ! in :capsolpy:CapSolPy.f90:defcapsol
                character*50 :: time
            end subroutine get_time
            subroutine make_hess(n,m,l,z_steps,eps_r,hn,r,hm,zm,b,hess) ! in :capsolpy:CapSolPy.f90:defcapsol
                integer, optional,intent(in),check((len(hn)-1)>=n),depend(hn) :: n=(len(hn)-1)
                integer intent(in) :: m
                integer intent(in) :: l
                integer intent(in) :: z_steps
                real*8 intent(in) :: eps_r
                real(kind=dp) dimension(n + 1),intent(in) :: hn
                real(kind=dp) dimension(n + 1),intent(in),depend(n) :: r
                real(kind=dp) dimension(m+l+1),intent(in),depend(m,l) :: hm
                real(kind=dp) dimension(m+l+1),intent(in),depend(m,l) :: zm
                real(kind=dp) dimension(m+l+1,n + 1),intent(in),depend(m,l,n) :: b
                real*8 dimension(min(m+ l + 1, n+1)+1,(n+1)*( l + 1)),intent(out),depend(n,m,l,n,l) :: hess
            end subroutine make_hess
        end module defcapsol
        subroutine capsolcyl(n,m,l_js,h0,rho_max,z_max,d_steps,rtip,theta_deg,hcone,rcant,dcant,eps_r,hsam,method_in,test,verbose,c_unitless,hess) ! in :capsolpy:CapSolPy.f90
            use defcapsol
            integer intent(in) :: n
            integer intent(in) :: m
            integer intent(in) :: l_js
            real*8 intent(in) :: h0
            real*8 intent(in) :: rho_max
            real*8 intent(in) :: z_max
            integer intent(in) :: d_steps
            real*8 intent(in) :: rtip
            real*8 intent(in) :: theta_deg
            real*8 intent(in) :: hcone
            real*8 intent(in) :: rcant
            real*8 intent(in) :: dcant
            real*8 intent(in) :: eps_r
            real*8 intent(in) :: hsam
            character*10 intent(in) :: method_in
            integer intent(in) :: test
            integer intent(in) :: verbose
            real*8 intent(out) :: c_unitless
            real*8 dimension(min(m+ l_js + d_steps + 1, n+1)+1,(n+1)*( l_js + d_steps + 1)),intent(out),depend(n,m,l_js,d_steps,n,l_js,d_steps) :: hess
        end subroutine capsolcyl
    end interface 
end python module capsolpy

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
